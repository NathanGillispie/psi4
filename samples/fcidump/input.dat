#! test FCIDUMP functionality for rhf/uhf

molecule ne {
  Ne  0  0  0
}

set {
  basis 6-311g
  scf_type pk
  reference rhf
  d_convergence 1e-8
  e_convergence 1e-8
}

if psi4.core.get_option("scf", "orbital_optimizer_package") == "INTERNAL":
    fci_tol = 10
else:
    fci_tol = 8

scf_e, scf_wfn = energy('SCF', return_wfn=True)
fcidump(scf_wfn, fname='Ne.6311G.INTDUMP', oe_ints=['EIGENVALUES'])
clean()

set {
  basis 6-311g
  scf_type pk
  reference rhf
  d_convergence 1e-8
  e_convergence 1e-8
  num_frozen_docc 2
  num_frozen_uocc 4
}

if psi4.core.get_option("scf", "orbital_optimizer_package") != "INTERNAL":
    psi4.set_options({"e_convergence": 9, "d_convergence": 6e-8})

scf_e, scf_wfn = energy('SCF', return_wfn=True)
fcidump(scf_wfn, fname='Ne.6311G.frozen.INTDUMP', oe_ints=['EIGENVALUES'])
clean()

set {
  basis cc-pvdz
  scf_type pk
  reference uhf
  d_convergence 1e-8
  e_convergence 1e-8
  num_frozen_docc 0
  num_frozen_uocc 0
}

if psi4.core.get_option("scf", "orbital_optimizer_package") != "INTERNAL":
    psi4.set_options({"e_convergence": 10, "d_convergence": 6e-8})

scf_e, scf_wfn = energy('SCF', return_wfn=True)
fcidump(scf_wfn, fname='Ne.cc-pVDZ.UHF.INTDUMP', oe_ints=['EIGENVALUES'])
clean()

# Now run without symmetry
ne.reset_point_group('C1')

set {
  basis 6-311g
  scf_type pk
  reference rhf
  d_convergence 1e-8
  e_convergence 1e-8
}

if psi4.core.get_option("scf", "orbital_optimizer_package") != "INTERNAL":
    psi4.set_options({"e_convergence": 9, "d_convergence": 5e-8})

scf_e, scf_wfn = energy('SCF', return_wfn=True)
fcidump(scf_wfn, fname='Ne.C1.6311G.INTDUMP', oe_ints=['EIGENVALUES'])
clean()

set {
  basis cc-pvdz
  scf_type pk
  reference uhf
  d_convergence 1e-8
  e_convergence 1e-8
}

if psi4.core.get_option("scf", "orbital_optimizer_package") != "INTERNAL":
    psi4.set_options({"e_convergence": 9, "d_convergence": 3e-8})
    fci_tol = 8

scf_e, scf_wfn = energy('SCF', return_wfn=True)
fcidump(scf_wfn, fname='Ne.C1.cc-pVDZ.UHF.INTDUMP', oe_ints=['EIGENVALUES'])
